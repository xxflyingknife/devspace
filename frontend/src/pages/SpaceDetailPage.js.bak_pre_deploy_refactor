import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Header from '../components/Header';
import FileTreeViewer from '../components/FileTreeViewer'; // For Dev Space
import ChatInterface from '../components/ChatInterface';
import Accordion from '../components/Accordion';
import Modal from '../components/Modal'; // For K8s Deploy settings
import Drawer from '../components/Drawer';
// import K8sWorkloadDisplay from '../components/K8sWorkloadDisplay'; // Removed previously, add back if fixed
import LoadingSpinner from '../components/LoadingSpinner';
import './SpaceDetailPage.css';

// Mock data/functions (replace with API calls)
const mockFetchSpaceDetails = async (spaceId) => {
    await new Promise(resolve => setTimeout(resolve, 200));
    // Determine type based on ID for mock, real app gets from backend
    let type = 'dev';
    let name = spaceId.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    if (spaceId.includes('ops')) {
        type = 'ops';
    } else if (spaceId.includes('dev')) {
        type = 'dev';
    }
    // Simulate dynamic name fetching
    if (spaceId === 'proj-prefab-modular') name = '预制和模块化建筑市场概览';
    else if (spaceId === 'ops-cluster-monitor') name = '生产环境集群监控 Ops';
    else if (spaceId === 'sre-incident-response') name = 'SRE 事件响应手册 Ops';


    return { id: spaceId, name: name || `空间 ${spaceId}`, type: type, description: `这是 ${type} 类型的空间 ${spaceId} 的描述。` };
};

// Ops Space Left Panel Mock Data
const mockFetchOpsWorkloads = async (spaceId) => {
    await new Promise(resolve => setTimeout(resolve, 400));
    return [
        {id: 'wl-pod-grp-1', name: 'Frontend Pods (prod)', type: 'pods', status: 'Healthy', count: 5},
        {id: 'wl-deploy-db', name: 'Database Deployment (main)', type: 'deployment', status: 'Scaling', count: 1},
        {id: 'wl-svc-api', name: 'API Gateway Service', type: 'service', status: 'Degraded', count: 3},
        {id: 'wl-cron-backup', name: 'Daily Backup CronJob', type: 'cronjob', status: 'Scheduled', count: 1},
    ];
};
// Ops Space Right Panel Mock Data
const mockFetchAIOpsSkills = () => [{id: 'skill1', name: '异常检测'}, {id: 'skill2', name: '根因分析'}];
const mockFetchSREPlans = () => [{id: 'plan1', name: '数据库扩容预案'}, {id: 'plan2', name: '紧急回滚流程'}];
const mockFetchPrompts = () => [{id: 'p1', name: 'K8s Pod 重启排查'}, {id: 'p2', name: '网络延迟分析'}];


function SpaceDetailPage() {
  const { spaceId } = useParams();
  const [spaceDetails, setSpaceDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // State for Dev Space Right Panel (K8s Deploy)
  const [showDeploySettingsModal, setShowDeploySettingsModal] = useState(false);
  const [k8sEnvUrl, setK8sEnvUrl] = useState('https://kubernetes.default.svc'); // Mock
  const [deployments, _setDeployments] = useState([ // Mock K8s deployments for dev space
    { id: 'dep1', name: 'my-app-backend', status: 'Running', replicas: '2/2', lastDeployed: '2h ago'},
    { id: 'dep2', name: 'my-app-frontend', status: 'Pending', replicas: '0/1', lastDeployed: '5m ago'},
  ]);


  // State for Ops Space panels
  const [opsWorkloads, setOpsWorkloads] = useState([]);
  const [aiOpsSkills, setAIOpsSkills] = useState([]);
  const [srePlans, setSREPlans] = useState([]);
  const [savedPrompts, setSavedPrompts] = useState([]);

  // Theme and Drawer states (can be moved to a global context later)
  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'system');
  const [showHelpDrawer, setShowHelpDrawer] = useState(false);
  const [showFeedbackDrawer, setShowFeedbackDrawer] = useState(false);

  useEffect(() => {
    setIsLoading(true);
    setError(null);
    mockFetchSpaceDetails(spaceId)
      .then(data => {
        setSpaceDetails(data);
        if (data.type === 'ops') {
            mockFetchOpsWorkloads(spaceId).then(setOpsWorkloads);
            setAIOpsSkills(mockFetchAIOpsSkills());
            setSREPlans(mockFetchSREPlans());
            setSavedPrompts(mockFetchPrompts());
        }
        // For Dev space, FileTreeViewer and Deployments have their own data/logic
      })
      .catch(err => {
        console.error("Error fetching space details:", err);
        setError("无法加载空间详情");
      })
      .finally(() => setIsLoading(false));
  }, [spaceId]);

  useEffect(() => {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  const handleToggleTheme = (selectedTheme) => {
    setTheme(selectedTheme);
  };

  const handleSaveDeploySettings = (e) => {
      e.preventDefault();
      alert(`K8s Deploy Environment URL saved: ${k8sEnvUrl}`);
      // TODO: Call backend to save this
      setShowDeploySettingsModal(false);
  };

  if (isLoading) return (
    <div className="space-detail-page"><Header /><div className="loading-fullpage">加载空间详情...</div></div>
  );
  if (error) return (
    <div className="space-detail-page"><Header /><div className="error-fullpage">{error}</div></div>
  );
  if (!spaceDetails) return (
    <div className="space-detail-page"><Header /><div className="error-fullpage">未找到空间。</div></div>
  );


  const renderDevLeftPanel = () => (
    <FileTreeViewer repoId={spaceId} />
  );

  const renderDevRightPanel = () => (
    <>
      <div className="panel-header">
        <span className="panel-title">Deployments</span>
        <button className="panel-header-button" onClick={() => setShowDeploySettingsModal(true)} title="Configure K8s Environment">[⚙️]</button>
        <button className="panel-header-button primary" onClick={() => alert('Trigger new deployment!')} title="New Deployment">[🚀 Deploy]</button>
      </div>
      <div className="deploy-list-container">
        {deployments.length > 0 ? (
            <ul className="deploy-list">
                {deployments.map(dep => (
                    <li key={dep.id} className="deploy-list-item">
                        <strong className="deploy-name">{dep.name}</strong>
                        <span className={`deploy-status ${dep.status.toLowerCase()}`}>{dep.status}</span>
                        <span className="deploy-replicas">{dep.replicas}</span>
                        <span className="deploy-time">{dep.lastDeployed}</span>
                        <button className="deploy-action-button">[…]</button>
                    </li>
                ))}
            </ul>
        ) : <p>No deployments configured for this space yet.</p>}
      </div>
      {showDeploySettingsModal && (
        <Modal isOpen={showDeploySettingsModal} onClose={() => setShowDeploySettingsModal(false)} title="Configure K8s Deploy Environment">
          <form onSubmit={handleSaveDeploySettings} className="modal-form">
            <div className="form-group">
              <label htmlFor="k8sEnvUrl">K8s Environment URL/Context:</label>
              <input type="text" id="k8sEnvUrl" value={k8sEnvUrl} onChange={(e) => setK8sEnvUrl(e.target.value)} required />
            </div>
            <div className="modal-form-actions">
              <button type="button" className="modal-button secondary" onClick={() => setShowDeploySettingsModal(false)}>取消</button>
              <button type="submit" className="modal-button primary">保存</button>
            </div>
          </form>
        </Modal>
      )}
    </>
  );

  const renderOpsLeftPanel = () => (
    <>
        <div className="panel-header">
            <span className="panel-title">Workloads</span>
            {/* Add controls like filter/sort if needed */}
        </div>
        <div className="ops-workload-list-container">
            {opsWorkloads.length > 0 ? (
                <ul className="ops-workload-list">
                    {opsWorkloads.map(wl => (
                        <li key={wl.id} className="ops-workload-item">
                            <span className="workload-icon">{wl.type === 'pods' ? '□' : (wl.type === 'deployment' ? 'D' : 'S')}</span>
                            <span className="workload-name">{wl.name}</span>
                            <span className={`workload-status ${wl.status.toLowerCase().replace(' ', '-')}`}>{wl.status}</span>
                            <span className="workload-count">{wl.count}</span>
                        </li>
                    ))}
                </ul>
            ) : <p>No workloads to display for this space.</p>}
        </div>
    </>
  );

 const renderOpsRightPanel = () => (
    <>
        <div className="panel-header">
            <span className="panel-title">AIOps Studio</span>
             {/* Controls could go here */}
        </div>
        <div className="ops-right-panel-content">
            <Accordion title="AIOps 技能插件" initialOpen={true}>
                <ul className="ops-plugin-list">
                    {aiOpsSkills.map(skill => <li key={skill.id}><button>{skill.name}</button></li>)}
                </ul>
            </Accordion>
            <Accordion title="SRE 计划任务" initialOpen={false}>
                <ul className="ops-plugin-list">
                    {srePlans.map(plan => <li key={plan.id}><button>{plan.name}</button></li>)}
                </ul>
                 <button className="add-new-button">+ 新建计划</button>
            </Accordion>
            <Accordion title="Prompt 记事本" initialOpen={false}>
                <ul className="ops-plugin-list">
                    {savedPrompts.map(p => <li key={p.id}><button>{p.name}</button></li>)}
                </ul>
                 <button className="add-new-button">+ 保存当前会话</button>
            </Accordion>
        </div>
    </>
 );


  return (
    <div className="space-detail-page">
      <Header
        pageType="detail"
        spaceType={spaceDetails.type}
        spaceName={spaceDetails.name}
        onToggleTheme={handleToggleTheme}
        onShowHelp={() => setShowHelpDrawer(true)}
        onShowFeedback={() => setShowFeedbackDrawer(true)}
      />

      <main className="three-column-layout">
        <div className="column left-column">
          {spaceDetails.type === 'dev' ? renderDevLeftPanel() : renderOpsLeftPanel()}
        </div>

        <div className="column middle-column">
          <ChatInterface spaceId={spaceId} />
        </div>

        <div className="column right-column">
          {spaceDetails.type === 'dev' ? renderDevRightPanel() : renderOpsRightPanel()}
        </div>
      </main>

      {/* Drawers (same as SpaceListPage) */}
      <Drawer isOpen={showHelpDrawer} onClose={() => setShowHelpDrawer(false)} title="帮助中心" position="right">
        <div className="drawer-content-placeholder">
            <h2>如何使用空间详情</h2>
            {spaceDetails.type === 'dev' && (
                <>
                    <p><strong>Dev 空间:</strong></p>
                    <p>左侧栏是您的 Git 仓库文件浏览器。您可以在此查看文件、切换分支，并通过顶部的设置按钮配置仓库地址。</p>
                    <p>中间是与 AI 助手的聊天窗口，您可以让它帮助您理解代码、生成提交信息、执行 Git 操作（通过工具）等。</p>
                    <p>右侧栏显示您的 Kubernetes 部署环境。您可以查看部署状态，并通过顶部的“部署”按钮触发新的部署流程或配置环境地址。</p>
                </>
            )}
            {spaceDetails.type === 'ops' && (
                 <>
                    <p><strong>Ops 空间:</strong></p>
                    <p>左侧栏显示了您当前关注的 Kubernetes Workloads 列表及其状态。</p>
                    <p>中间是与 AI 助手的聊天窗口，您可以让它帮助您查询监控数据、分析日志、执行预定义的运维操作（通过工具）等。</p>
                    <p>右侧栏是 AIOps Studio，包含可用的 AIOps 技能插件、SRE 自动化计划任务和您保存的 Prompt 会话，方便快速调用和复用。</p>
                </>
            )}
            <p>通用提示：使用聊天窗口底部的工具按钮（如果可用）来执行特定场景的自动化操作。</p>
        </div>
      </Drawer>
      <Drawer isOpen={showFeedbackDrawer} onClose={() => setShowFeedbackDrawer(false)} title="提交反馈" position="right">
        <div className="drawer-content-placeholder">
            <h2>我们重视您的意见！</h2>
            <form className="feedback-form" onSubmit={(e) => {e.preventDefault(); alert('感谢您的反馈！'); setShowFeedbackDrawer(false);}}>
                {/* Feedback form content (same as list page) */}
                <div className="form-group">
                    <label htmlFor="feedbackType">反馈类型</label>
                    <select id="feedbackType"><option value="bug">错误报告</option><option value="feature">功能建议</option></select>
                </div>
                <div className="form-group">
                    <label htmlFor="feedbackMessage">详细信息</label>
                    <textarea id="feedbackMessage" rows="8" required placeholder="请详细描述您的问题或建议..."></textarea>
                </div>
                <button type="submit" className="modal-button primary">提交反馈</button>
            </form>
        </div>
      </Drawer>

    </div>
  );
}

export default SpaceDetailPage;
