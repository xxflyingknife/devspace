import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Header from '../components/Header'; // Use Header
import SourceListItem from '../components/SourceListItem'; // Use new Source List Item
import ChatInterface from '../components/ChatInterface';
import Accordion from '../components/Accordion'; // Use Accordion
import K8sWorkloadDisplay from '../components/K8sWorkloadDisplay'; // Keep this for content
import LoadingSpinner from '../components/LoadingSpinner';
import './SpaceDetailPage.css';

// Mock function to simulate fetching sources for the left panel
const fetchSources = async (spaceId) => {
  console.log("Fetching sources for:", spaceId);
  await new Promise(resolve => setTimeout(resolve, 500)); // Simulate delay
  // Replace with actual API call: /api/git/sources?repoId=... or similar
  return [
    { id: 's1', name: '10年中国十大集装箱房制造商 - Ow...', type: 'file', isSelected: true },
    { id: 's2', name: '2024年中国装配式建筑行业...', type: 'file', isSelected: false },
    { id: 's3', name: 'ABOUT - BOXABL', type: 'file', isSelected: true },
    { id: 's4', name: 'BOXABL', type: 'folder', isSelected: false }, // Example folder
    { id: 's5', name: 'BOXABL\'s Struggle with Operation and...', type: 'file', isSelected: false },
    { id: 's6', name: 'CN108193740A - 一种建筑用模块化...', type: 'file', isSelected: false },
    { id: 's7', name: 'CN114593451B - 一种智能温控即热型...', type: 'file', isSelected: false },
    { id: 's8', name: 'How Boxabl is Revolutionizing Afford...', type: 'file', isSelected: false },
    { id: 's9', name: 'The Ultimate Guide on How to Start A...', type: 'file', isSelected: false },
    { id: 's10', name: 'Top 15 Boxabl Competitors And Alter...', type: 'file', isSelected: false },
    { id: 's11', name: 'Vertex BD 装配式建筑及模块化设计...', type: 'file', isSelected: false },
  ];
};

function SpaceDetailPage() {
  const { spaceId } = useParams();
  const [spaceName, setSpaceName] = useState('加载中...'); // Example state for space name
  const [sources, setSources] = useState([]);
  const [selectedSources, setSelectedSources] = useState({});
  const [isLoadingSources, setIsLoadingSources] = useState(false);
  const [sourceError, setSourceError] = useState(null);

  // Fetch space details (name) and sources on mount or when spaceId changes
  useEffect(() => {
    // Reset state
    setSpaceName('加载中...');
    setSources([]);
    setSelectedSources({});
    setSourceError(null);
    setIsLoadingSources(true);

    // Simulate fetching space name (replace with API call)
    // For now, derive from ID for display
    const name = spaceId.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    setSpaceName(name || '空间详情'); // Fallback name

    // Fetch sources
    fetchSources(spaceId)
      .then(data => {
        setSources(data);
        // Initialize selection state based on fetched data
        const initialSelection = {};
        data.forEach(s => { initialSelection[s.id] = s.isSelected || false });
        setSelectedSources(initialSelection);
      })
      .catch(err => {
        console.error("Error fetching sources:", err);
        setSourceError("无法加载来源列表");
      })
      .finally(() => {
        setIsLoadingSources(false);
      });

  }, [spaceId]);

  const handleSourceSelectionChange = (sourceId, isSelected) => {
    setSelectedSources(prev => ({
      ...prev,
      [sourceId]: isSelected
    }));
    // TODO: Maybe trigger something when selection changes?
    // e.g., update chat context via backend
    console.log("Selected sources:", Object.keys(selectedSources).filter(id => selectedSources[id]));
  };

  return (
    <div className="space-detail-page">
      {/* Use Header, passing spaceName */}
      <Header spaceName={spaceName} />

      <div className="three-column-layout">
        {/* Left Column: Sources */}
        <div className="column left-column">
          <div className="panel-header">
            <h2>来源</h2>
            <div className="panel-controls">
                <button className="control-button">[+] 添加</button>
                <button className="control-button">[搜索]</button>
            </div>
          </div>
          <div className="source-list-container">
             {isLoadingSources && <LoadingSpinner />}
             {sourceError && <p className="error-message">{sourceError}</p>}
             {!isLoadingSources && !sourceError && (
                 <ul className="source-list">
                     {sources.map(source => (
                         <SourceListItem
                             key={source.id}
                             id={source.id}
                             name={source.name}
                             type={source.type}
                             isSelected={selectedSources[source.id] || false}
                             onSelect={handleSourceSelectionChange}
                         />
                     ))}
                 </ul>
             )}
          </div>
        </div>

        {/* Middle Column: Chat Interface */}
        <div className="column middle-column">
          {/* ChatInterface already updated via script 09 */}
          <ChatInterface spaceId={spaceId} />
          {/* Add the buttons below the chat header section if needed */}
           <div className="chat-action-buttons">
               <button>[+] 添加笔记</button>
               <button>[♪] 音频概览</button>
               <button>[💡] 思维导图</button>
           </div>
        </div>

        {/* Right Column: Studio Panel */}
        <div className="column right-column">
           <div className="panel-header">
             <h2>Studio</h2>
             <button className="control-button">[+] 加载</button>
           </div>
           <div className="studio-content">
              {/* Use Accordion for sections */}
              <Accordion title="音频概览" initialOpen={false}>
                 <p>音频概览内容将出现在这里...</p>
                 {/* Add specific components or controls */}
              </Accordion>
              <Accordion title="备注" initialOpen={true}>
                  <textarea placeholder="输入你的笔记..." rows="5" style={{width: '100%'}}></textarea>
              </Accordion>
              <Accordion title="学习指南" initialOpen={true}>
                  <p>AI 生成的学习指南将出现在这里...</p>
                  {/* Example action button */}
                  <button>生成指南</button>
              </Accordion>
              <Accordion title="常见问题解答" initialOpen={false}>
                   <p>AI 生成的 FAQ 将出现在这里...</p>
              </Accordion>
               <Accordion title="时间轴" initialOpen={false}>
                   <p>AI 生成的时间轴将出现在这里...</p>
              </Accordion>
               <Accordion title="K8s Workloads" initialOpen={true}>
                   {/* Embed the K8s display here */}
                   <K8sWorkloadDisplay appId={spaceId} />
              </Accordion>
              {/* Add more Accordion sections for other Studio features */}
           </div>
        </div>
      </div>
    </div>
  );
}

export default SpaceDetailPage;
