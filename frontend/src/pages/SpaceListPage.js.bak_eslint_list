import React, { useState, useEffect } from 'react';
import Header from '../components/Header';
import SpaceCard from '../components/SpaceCard';
import SpaceListItem from '../components/SpaceListItem'; // For list view
import Modal from '../components/Modal';
import Drawer from '../components/Drawer';
import './SpaceListPage.css';

// Mock backend functions (replace with actual API calls)
const mockFetchSpaces = async () => {
  await new Promise(resolve => setTimeout(resolve, 300)); // Simulate delay
  return [
    { id: 'proj-prefab-modular', name: '预制和模块化建筑市场概览', type: 'dev', date: '2025年5月5日', sourceCount: 16, icon: '📦', color: '#E0F2F7' },
    { id: 'ops-cluster-monitor', name: '生产环境集群监控 Ops', type: 'ops', date: '2025年5月6日', sourceCount: 22, icon: '🛠️', color: '#E8F5E9' },
    { id: 'art-wheelwrighting', name: 'The Art and Craft of Wheelwrighting', type: 'dev', date: '2025年5月5日', sourceCount: 9, icon: '⚙️', color: '#FFF9C4' },
    { id: 'play-benefits', name: '户玩游戏对儿童成长的益处', type: 'dev', date: '2025年5月11日', sourceCount: 15, icon: '🏡', color: '#E8F5E9' },
    { id: 'sre-incident-response', name: 'SRE 事件响应手册 Ops', type: 'ops', date: '2025年5月12日', sourceCount: 18, icon: '🚨', color: '#FFEBEE' },
    { id: 'disaster-checklist', name: '灾害应急物品清单', type: 'dev', date: '2025年5月11日', sourceCount: 12, icon: '⏱️', color: '#FCE4EC' },
  ];
};
const mockCreateSpace = async (spaceData) => {
    console.log("Creating space:", spaceData);
    await new Promise(resolve => setTimeout(resolve, 500));
    return { ...spaceData, id: `new-${Math.random().toString(16).slice(2)}`, date: new Date().toLocaleDateString('zh-CN'), sourceCount: 0 }; // Return new space with ID
};
const mockUpdateSpaceTitle = async (spaceId, newTitle) => {
    console.log("Updating title for:", spaceId, "to:", newTitle);
    await new Promise(resolve => setTimeout(resolve, 300));
    return true;
};
const mockDeleteSpace = async (spaceId) => {
    console.log("Deleting space:", spaceId);
    await new Promise(resolve => setTimeout(resolve, 300));
    return true;
};


function SpaceListPage() {
  const [spaces, setSpaces] = useState([]);
  const [filteredSpaces, setFilteredSpaces] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'
  const [filterType, setFilterType] = useState('all'); // 'all', 'dev', 'ops'
  const [searchTerm, setSearchTerm] = useState(''); // For potential future search

  const [showNewSpaceModal, setShowNewSpaceModal] = useState(false);
  const [showEditSpaceModal, setShowEditSpaceModal] = useState(false);
  const [editingSpace, setEditingSpace] = useState(null); // {id, name}

  const [newSpaceName, setNewSpaceName] = useState('');
  const [newSpaceType, setNewSpaceType] = useState('dev');
  const [newSpaceDescription, setNewSpaceDescription] = useState('');

  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'system');
  const [showHelpDrawer, setShowHelpDrawer] = useState(false);
  const [showFeedbackDrawer, setShowFeedbackDrawer] = useState(false);

  // Fetch initial spaces
  useEffect(() => {
    setIsLoading(true);
    mockFetchSpaces()
      .then(data => {
        setSpaces(data);
        setFilteredSpaces(data); // Initially show all
      })
      .catch(err => {
        console.error("Error fetching spaces:", err);
        setError("无法加载空间列表");
      })
      .finally(() => setIsLoading(false));
  }, []);

  // Apply filtering when filterType or spaces change
  useEffect(() => {
    let currentSpaces = [...spaces];
    if (filterType !== 'all') {
      currentSpaces = currentSpaces.filter(space => space.type === filterType);
    }
    // TODO: Add search term filtering if implemented
    // if (searchTerm) {
    //   currentSpaces = currentSpaces.filter(space => space.name.toLowerCase().includes(searchTerm.toLowerCase()));
    // }
    setFilteredSpaces(currentSpaces);
  }, [spaces, filterType, searchTerm]);

  // Apply theme to body
  useEffect(() => {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  const handleToggleTheme = (selectedTheme) => {
    setTheme(selectedTheme);
  };

  const handleCreateNewSpace = async (e) => {
    e.preventDefault();
    if (!newSpaceName.trim()) {
      alert("空间名称不能为空");
      return;
    }
    const spaceData = { name: newSpaceName, type: newSpaceType, description: newSpaceDescription };
    try {
      const newSpace = await mockCreateSpace(spaceData);
      setSpaces(prev => [newSpace, ...prev]); // Add to start of list
      setShowNewSpaceModal(false);
      setNewSpaceName(''); setNewSpaceType('dev'); setNewSpaceDescription(''); // Reset form
    } catch (err) {
      alert("创建空间失败: " + err.message);
    }
  };

  const handleDeleteSpace = async (spaceId, spaceName) => {
    if (window.confirm(`确定要删除空间 "${spaceName}" 吗？此操作无法撤销。`)) {
      try {
        await mockDeleteSpace(spaceId);
        setSpaces(prev => prev.filter(s => s.id !== spaceId));
      } catch (err) {
        alert("删除空间失败: " + err.message);
      }
    }
  };

  const openEditModal = (spaceId, currentName) => {
    setEditingSpace({ id: spaceId, name: currentName });
    setNewSpaceName(currentName); // Pre-fill for editing
    setShowEditSpaceModal(true);
  };

  const handleEditSpaceTitle = async (e) => {
    e.preventDefault();
    if (!editingSpace || !newSpaceName.trim()) return;
    try {
      await mockUpdateSpaceTitle(editingSpace.id, newSpaceName);
      setSpaces(prev => prev.map(s => s.id === editingSpace.id ? { ...s, name: newSpaceName } : s));
      setShowEditSpaceModal(false);
      setEditingSpace(null);
      setNewSpaceName(''); // Reset
    } catch (err) {
      alert("修改标题失败: " + err.message);
    }
  };


  if (isLoading) return <div className="loading-fullpage">加载中...</div>;
  if (error) return <div className="error-fullpage">{error}</div>;

  return (
    <div className="space-list-page-container">
      <Header
        pageType="list"
        onToggleTheme={handleToggleTheme}
        onShowHelp={() => setShowHelpDrawer(true)}
        onShowFeedback={() => setShowFeedbackDrawer(true)}
      />
      <main className="space-list-main">
        <div className="space-list-header">
          {/* Title removed as per new design for list page header */}
          <div className="space-list-controls">
             <button className="new-space-button" onClick={() => setShowNewSpaceModal(true)}>+ 新建</button>
             <div className="view-controls">
                 <button
                    className={`control-button ${viewMode === 'grid' ? 'active' : ''}`}
                    onClick={() => setViewMode('grid')}
                    aria-label="Grid view"
                 >
                    [▦] {/* Grid Icon */}
                 </button>
                 <button
                    className={`control-button ${viewMode === 'list' ? 'active' : ''}`}
                    onClick={() => setViewMode('list')}
                    aria-label="List view"
                 >
                    [≡] {/* List Icon */}
                 </button>
             </div>
             <select
                className="filter-dropdown"
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                aria-label="Filter spaces by type"
              >
                 <option value="all">所有空间</option>
                 <option value="dev">Dev 空间</option>
                 <option value="ops">Ops 空间</option>
             </select>
          </div>
        </div>

        {viewMode === 'grid' ? (
          <div className="space-grid">
            {filteredSpaces.map(space => (
              <SpaceCard
                key={space.id}
                {...space}
                onDelete={handleDeleteSpace}
                onEditTitle={openEditModal}
              />
            ))}
          </div>
        ) : (
          <ul className="space-list-view">
            {/* Optional: Add list headers */}
            {/* <li className="space-list-header-row">
                <div>Icon</div><div>Name</div><div>Type</div><div>Sources</div><div>Date</div><div>Actions</div>
            </li> */}
            {filteredSpaces.map(space => (
              <SpaceListItem
                key={space.id}
                {...space}
                onDelete={handleDeleteSpace}
                onEditTitle={openEditModal}
              />
            ))}
          </ul>
        )}
        {filteredSpaces.length === 0 && !isLoading && (
            <p className="no-spaces-message">没有找到符合条件的空间。</p>
        )}
      </main>

      {/* New Space Modal */}
      <Modal
        isOpen={showNewSpaceModal}
        onClose={() => setShowNewSpaceModal(false)}
        title="新建空间"
        footerContent={
          <>
            <button type="button" className="modal-button secondary" onClick={() => setShowNewSpaceModal(false)}>取消</button>
            <button type="submit" form="new-space-form" className="modal-button primary">创建</button>
          </>
        }
      >
        <form id="new-space-form" className="modal-form" onSubmit={handleCreateNewSpace}>
          <div className="form-group">
            <label htmlFor="newSpaceName">空间名称</label>
            <input
              type="text"
              id="newSpaceName"
              value={newSpaceName}
              onChange={(e) => setNewSpaceName(e.target.value)}
              required
              placeholder="例如：我的项目 A"
            />
          </div>
          <div className="form-group">
            <label htmlFor="newSpaceType">空间类型</label>
            <select id="newSpaceType" value={newSpaceType} onChange={(e) => setNewSpaceType(e.target.value)}>
              <option value="dev">Dev (开发)</option>
              <option value="ops">Ops (运维)</option>
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="newSpaceDescription">空间说明 (可选)</label>
            <textarea
              id="newSpaceDescription"
              value={newSpaceDescription}
              onChange={(e) => setNewSpaceDescription(e.target.value)}
              rows="3"
              placeholder="简要描述这个空间的用途..."
            />
          </div>
        </form>
      </Modal>

      {/* Edit Space Title Modal */}
      {editingSpace && (
        <Modal
            isOpen={showEditSpaceModal}
            onClose={() => { setShowEditSpaceModal(false); setEditingSpace(null); setNewSpaceName('');}}
            title="修改空间标题"
            footerContent={
              <>
                <button type="button" className="modal-button secondary" onClick={() => { setShowEditSpaceModal(false); setEditingSpace(null); setNewSpaceName('');}}>取消</button>
                <button type="submit" form="edit-space-form" className="modal-button primary">保存</button>
              </>
            }
        >
            <form id="edit-space-form" className="modal-form" onSubmit={handleEditSpaceTitle}>
                <div className="form-group">
                    <label htmlFor="editSpaceName">新空间名称</label>
                    <input
                        type="text"
                        id="editSpaceName"
                        value={newSpaceName} // Use newSpaceName for controlled input
                        onChange={(e) => setNewSpaceName(e.target.value)}
                        required
                    />
                </div>
            </form>
        </Modal>
      )}

      {/* Help Drawer */}
      <Drawer isOpen={showHelpDrawer} onClose={() => setShowHelpDrawer(false)} title="帮助中心" position="right">
        <div className="drawer-content-placeholder">
            <h2>如何使用本平台</h2>
            <p>这是一个 DevOps 助手平台，旨在帮助您...</p>
            <p><strong>空间列表:</strong> 您可以创建不同类型的空间来组织您的项目。</p>
            <p><strong>Dev 空间:</strong> 专注于代码管理和持续集成/部署...</p>
            <p><strong>Ops 空间:</strong> 专注于监控、AIOps 和自动化运维任务...</p>
            <p><strong>聊天交互:</strong> 在每个空间详情页，您可以通过聊天与 AI 助手交互，执行相关操作。</p>
            <h3>常见问题</h3>
            <ul>
                <li>如何连接我的 Git 仓库？ (在 Dev 空间详情页左侧栏配置)</li>
                <li>如何配置 K8s 部署环境？ (在 Dev 空间详情页右侧栏配置)</li>
                <li>如何使用 AIOps 技能？ (在 Ops 空间详情页右侧栏选择)</li>
            </ul>
            {/* Add more detailed help content */}
        </div>
      </Drawer>

      {/* Feedback Drawer */}
      <Drawer isOpen={showFeedbackDrawer} onClose={() => setShowFeedbackDrawer(false)} title="提交反馈" position="right">
        <div className="drawer-content-placeholder">
            <h2>我们重视您的意见！</h2>
            <p>如果您在使用过程中遇到任何问题，或有任何改进建议，请告诉我们。</p>
            <form className="feedback-form" onSubmit={(e) => {e.preventDefault(); alert('感谢您的反馈！'); setShowFeedbackDrawer(false);}}>
                <div className="form-group">
                    <label htmlFor="feedbackType">反馈类型</label>
                    <select id="feedbackType">
                        <option value="bug">错误报告</option>
                        <option value="feature">功能建议</option>
                        <option value="general">一般反馈</option>
                    </select>
                </div>
                <div className="form-group">
                    <label htmlFor="feedbackMessage">详细信息</label>
                    <textarea id="feedbackMessage" rows="8" required placeholder="请详细描述您的问题或建议..."></textarea>
                </div>
                 <div className="form-group">
                    <label htmlFor="feedbackEmail">您的邮箱 (可选)</label>
                    <input type="email" id="feedbackEmail" placeholder="以便我们回复您"/>
                </div>
                <button type="submit" className="modal-button primary">提交反馈</button>
            </form>
        </div>
      </Drawer>

    </div>
  );
}

export default SpaceListPage;
