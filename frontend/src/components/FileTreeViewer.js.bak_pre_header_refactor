import React, { useState, useEffect } from 'react';
import LoadingSpinner from './LoadingSpinner';
import './FileTreeViewer.css';

// Helper component for tree items (to handle recursion and state)
const TreeItem = ({ node, depth, onToggle, isExpanded }) => {
  const isFolder = node.type === 'folder';
  const indent = depth * 20; // 20px per depth level

  const handleToggle = () => {
    if (isFolder) {
      onToggle(node.id);
    }
    // Potentially handle file click action here
  };

  let icon;
  if (isFolder) {
    icon = isExpanded ? '‚ñº' : '‚ñ∂'; // Simple expand/collapse icons
  } else {
    icon = 'üìÑ'; // File icon
  }
  // In a real app, use proper SVG icons from a library

  return (
    <>
      <li
        className={`tree-node ${isFolder ? 'folder' : 'file'} ${isExpanded ? 'expanded' : ''}`}
        style={{ paddingLeft: `${indent}px` }}
        onClick={!isFolder ? handleToggle : undefined} // Allow click on files
      >
        {isFolder && (
            <span className="node-toggle-icon" onClick={handleToggle}>
                {icon}
            </span>
        )}
        {!isFolder && <span className="node-file-icon">{icon}</span>}
        <span className="node-name" onClick={isFolder ? handleToggle : undefined} title={node.name}>
            {node.name}
        </span>
      </li>
      {isExpanded && node.children && node.children.length > 0 && (
        // Render children if expanded and children exist
        node.children.map(childNode => (
          <TreeItem
            key={childNode.id}
            node={childNode}
            depth={depth + 1}
            onToggle={onToggle}
            isExpanded={isExpanded && childNode.type === 'folder' ? isExpanded : false} // Pass down expanded state if needed for child folders
          />
        ))
      )}
    </>
  );
};


function FileTreeViewer({ repoId }) {
  const [treeData, setTreeData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentBranch, setCurrentBranch] = useState('main'); // Mock current branch
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFolders, setExpandedFolders] = useState({}); // To track expanded folders by ID

  // TODO: Fetch branches for the selector from backend
  const branches = ['main', 'develop', 'feature/new-ui']; // Mock branches

  useEffect(() => {
    if (!repoId) return;

    const fetchTreeData = async () => {
      setIsLoading(true);
      setError(null);
      setTreeData(null);
      setExpandedFolders({}); // Reset expanded state on new data
      console.log(`Fetching file tree for repo: ${repoId}, branch: ${currentBranch}`);

      await new Promise(resolve => setTimeout(resolve, 700)); // Simulate delay
      try {
        const mockData = [
          { id: 'root-backend', name: 'backend', type: 'folder', children: [
            { id: 'backend-app', name: 'app', type: 'folder', children: [
              { id: 'backend-app-main', name: 'main.py', type: 'file' },
              { id: 'backend-app-db', name: 'database.py', type: 'file' },
            ]},
            { id: 'backend-dockerfile', name: 'Dockerfile', type: 'file' },
          ]},
          { id: 'root-frontend', name: 'frontend', type: 'folder', children: [
             { id: 'frontend-src', name: 'src', type: 'folder', children: [
               { id: 'frontend-src-app', name: 'App.js', type: 'file' },
               { id: 'frontend-src-index', name: 'index.js', type: 'file' },
             ]},
             { id: 'frontend-pkgjson', name: 'package.json', type: 'file' },
          ]},
          { id: 'root-kubernetes', name: 'kubernetes', type: 'folder', children: [
              { id: 'kube-be-deploy', name: 'backend-deployment.yaml', type: 'file'},
              { id: 'kube-be-svc', name: 'backend-service.yaml', type: 'file'},
              { id: 'kube-fe-deploy', name: 'frontend-deployment.yaml', type: 'file'},
              { id: 'kube-fe-svc', name: 'frontend-service.yaml', type: 'file'},
              { id: 'kube-ns', name: 'namespace.yaml', type: 'file'},
          ]},
          { id: 'root-gitignore', name: '.gitignore', type: 'file' },
          { id: 'root-readme', name: 'README.md', type: 'file' },
          { id: 'root-deploy', name: 'deploy.sh', type: 'file' },
          { id: 'root-pkg-lock', name: 'package-lock.json', type: 'file' },
        ];
        setTreeData(mockData);
        // Optionally auto-expand some top-level folders
        const initialExpanded = {};
        mockData.filter(node => node.type === 'folder').slice(0,1).forEach(node => { // Expand first folder
             initialExpanded[node.id] = true;
        });
        setExpandedFolders(initialExpanded);

      } catch (err) {
        console.error("Error fetching file tree:", err);
        setError("Failed to load file tree.");
      } finally {
        setIsLoading(false);
      }
    };
    fetchTreeData();
  }, [repoId, currentBranch]); // Re-fetch when repoId or currentBranch changes

  const handleBranchChange = (event) => {
    setCurrentBranch(event.target.value);
    // In a real app, this would trigger re-fetching tree data for the new branch
  };

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
    // TODO: Implement actual filtering logic based on searchTerm
  };

  const toggleFolder = (folderId) => {
    setExpandedFolders(prev => ({
      ...prev,
      [folderId]: !prev[folderId]
    }));
  };

  // Recursive render function using TreeItem component
  const renderTreeNodes = (nodes, depth = 0) => {
    if (!nodes) return null;
    // TODO: Filter nodes based on searchTerm if implementing search
    return nodes.map(node => (
      <TreeItem
        key={node.id}
        node={node}
        depth={depth}
        onToggle={toggleFolder}
        isExpanded={!!expandedFolders[node.id]}
      />
    ));
  };


  return (
    <div className="file-tree-viewer-container">
      <div className="file-tree-header">
        <span className="header-icon">[‚Üî]</span> {/* Placeholder for sidebar icon */}
        <span className="header-title">Files</span>
      </div>

      <div className="file-tree-controls">
        <div className="branch-selector-container">
          <span className="branch-icon">[git-branch]</span> {/* Placeholder */}
          <select value={currentBranch} onChange={handleBranchChange} className="branch-select">
            {branches.map(branch => (
              <option key={branch} value={branch}>{branch}</option>
            ))}
          </select>
        </div>
        <div className="action-buttons">
          <button className="action-button" title="Add new file/folder">[+]</button> {/* Placeholder */}
          <button className="action-button" title="Search code">[üîç]</button> {/* Placeholder */}
        </div>
      </div>

      <div className="search-bar-container">
        <span className="search-icon-input">[üîç]</span> {/* Placeholder */}
        <input
          type="text"
          placeholder="Go to file"
          value={searchTerm}
          onChange={handleSearchChange}
          className="search-input"
        />
        <span className="shortcut-hint">t</span>
      </div>

      <div className="file-tree-list-container">
        {isLoading && <LoadingSpinner />}
        {error && <p className="error-message">{error}</p>}
        {!isLoading && !error && treeData && (
          <ul className="file-tree">
            {renderTreeNodes(treeData)}
          </ul>
        )}
        {!isLoading && !error && !treeData && <p>No file data available.</p>}
      </div>
    </div>
  );
}

export default FileTreeViewer;
